{"version":3,"sources":["firebaseConfig.js","components/index.js","components/certificate.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","Home","props","state","teamData","collection","doc","get","then","exists","setState","data","console","log","catch","error","this","className","map","item","index","key","src","img","alt","desc","name","Component","Certificate","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8VAgBAA,IAASC,cAXM,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,8CAMJ,IAAMC,EAAKT,IAASU,YC6BZC,GD3BAX,EAAf,E,kDCfI,WAAYY,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,IAHC,E,gEAME,IAAD,OACCL,EAAGM,WAAW,QAAQC,IAAI,QAClCC,MAAMC,MAAK,SAACF,GACbA,EAAIG,OACJ,EAAKC,SAAS,CAAEN,SAAUE,EAAIK,OAAOA,OAErCC,QAAQC,IAAI,wBAEjBC,OAAM,SAACC,GACNH,QAAQC,IAAI,0BAA2BE,Q,+BAGrC,IACEX,EAAaY,KAAKb,MAAlBC,SACR,OACI,yBAAKa,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,kBAAiB,iDAEpC,yBAAKA,UAAU,OACVb,GAAYA,EAASc,KAAI,SAACC,EAAMC,GAAP,OACtB,yBAAKH,UAAU,8BAA8BI,IAAKD,GAC9C,4BAAQH,UAAU,gBACd,yBAAKK,IAAKH,EAAKI,IAAKC,IAAI,GAAGP,UAAU,oCACrC,gCAAYA,UAAU,uBAClB,2BAAIE,EAAKM,MACT,4BAAKN,EAAKO,kB,GAjC3BC,cCWJC,MAZf,WACI,OACI,yBAAKX,UAAU,eACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yDCsBLY,MApBf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gCACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACZ,0C,MCVQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMgC,c","file":"static/js/main.85d95f8f.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\n\nconst config = {\n    apiKey: \"AIzaSyB3TpjND15IXtY4oV4-7FQTJRfOpjsLrpc\",\n    authDomain: \"portfolio-4ad8b.firebaseapp.com\",\n    databaseURL: \"https://portfolio-4ad8b.firebaseio.com\",\n    projectId: \"portfolio-4ad8b\",\n    storageBucket: \"\",\n    messagingSenderId: \"601043154557\",\n    appId: \"1:601043154557:web:ecbf44661588f267202314\"\n};\n\n\nfirebase.initializeApp(config);\n\nexport const db = firebase.firestore();\n\nexport default firebase;","import React, { Component } from 'react';\nimport './style.scss';\nimport { db } from '../firebaseConfig';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            teamData: [],\n        }\n    }\n    componentDidMount() {\n        const TeamData = db.collection('team').doc('info');\n        TeamData.get().then((doc) => {\n            if (doc.exists) {\n                this.setState({ teamData: doc.data().data });\n            } else {\n                console.log(\"No such document!\");\n            }\n        }).catch((error) => {\n            console.log(\"Error getting document:\", error);\n        });\n    }\n    render() {\n        const { teamData } = this.state;\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-lg-12 my-5\"><h1>FE Team Members</h1></div>\n                </div>\n                <div className=\"row\">\n                    {teamData && teamData.map((item, index) => (\n                        <div className=\"col-xs-12 col-sm-6 col-lg-4\" key={index}>\n                            <figure className=\"effect-bubba\">\n                                <img src={item.img} alt=\"\" className=\"img-thumbnail img-fluid rounded\" />\n                                <figcaption className=\"hidden-sm hidden-xs\">\n                                    <p>{item.desc}</p>\n                                    <h2>{item.name}</h2>\n                                </figcaption>\n                            </figure>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\nexport default Home;\n","import React from 'react';\nimport './style.scss';\n\nfunction Certificate() {\n    return (\n        <div className=\"certificate\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <h1>Employee of the month</h1>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Certificate;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.scss';\nimport Home from './components';\nimport Certificate from './components/certificate';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/star-performer-of-the-month\">\n              <Certificate/>\n            </Route>\n            <Route path=\"/dashboard\">\n            <div>Test</div>\n            </Route>\n          </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}